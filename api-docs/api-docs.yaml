openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: https://localhost:8443
  description: Generated server url
paths:
  /api/users/{id}:
    get:
      tags:
      - user-rest-controller
      summary: Gets a user by its id
      operationId: getUser
      parameters:
      - name: id
        in: path
        description: id of the user to be searched
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Found the user
        "404":
          description: User not found or doesn't have permission to access it
        "400":
          description: Invalid id supplied
        "401":
          description: User not authorized
    put:
      tags:
      - user-rest-controller
      summary: Update a user by its id
      operationId: putUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
        required: true
      responses:
        "200":
          description: User updated correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: User not updated
        "403":
          description: User not authorized
    delete:
      tags:
      - user-rest-controller
      summary: Delete a user by its id
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: User not deleted
        "404":
          description: User not found
        "200":
          description: User deleted correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "403":
          description: User not authorized
  /api/users/{id}/image:
    get:
      tags:
      - user-rest-controller
      summary: Gets the image of a user by its id
      operationId: getUserImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid id supplied
        "404":
          description: "User not found, user image not found or doesn't have permission\
            \ to access it"
        "401":
          description: User not authorized
        "200":
          description: Found the user image
    put:
      tags:
      - user-rest-controller
      summary: Updates the image of a user
      operationId: postUserImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              required:
              - imageFile
              type: object
              properties:
                imageFile:
                  type: string
                  format: binary
      responses:
        "201":
          description: Image created correctly
        "401":
          description: User not authorized
        "404":
          description: User not found
        "403":
          description: User not authorized
        "400":
          description: Bad request
        "204":
          description: Image updated correctly
  /api/artists/{id}:
    get:
      tags:
      - artist-rest-controller
      summary: Get an artist by its id
      operationId: getArtist
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "400":
          description: Invalid id supplied
        "404":
          description: Artist not found
        "200":
          description: Found the artist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
    put:
      tags:
      - artist-rest-controller
      summary: Update an artist by its id
      operationId: putArtist
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artist'
        required: true
      responses:
        "200":
          description: Artist updated correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        "400":
          description: Artist not updated
        "403":
          description: User not authorized
    delete:
      tags:
      - artist-rest-controller
      summary: Delete an artist by its id
      operationId: deleteArtist
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Artist not updated
        "204":
          description: Artist deleted correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        "403":
          description: User not authorized
  /api/artists/{id}/image:
    get:
      tags:
      - artist-rest-controller
      operationId: getArtistImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
    put:
      tags:
      - artist-rest-controller
      operationId: updateArtistImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              required:
              - imageFile
              type: object
              properties:
                imageFile:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/users:
    post:
      tags:
      - user-rest-controller
      summary: Registers a new user
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
        required: true
      responses:
        "409":
          description: User already exists
        "400":
          description: "Bad request, maybe one of the user attributes is missing or\
            \ the type is not valid"
        "201":
          description: User registered correctly
  /api/tickets:
    get:
      tags:
      - ticket-rest-controller
      summary: Get a page of tickets
      operationId: getTickets
      parameters:
      - name: page
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Found the page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        "400":
          description: Invalid id supplied
        "404":
          description: Page not found
    post:
      tags:
      - ticket-rest-controller
      summary: Create a new ticket
      operationId: createTicket
      parameters:
      - name: num_ticket
        in: query
        required: true
        schema:
          type: integer
          format: int32
      - name: id_user
        in: query
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "201":
          description: Ticket created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Concert'
        "400":
          description: Ticket not created
        "403":
          description: User not autorized
  /api/refresh:
    post:
      tags:
      - auth-rest-controller
      operationId: refreshToken
      parameters:
      - name: refreshToken
        in: cookie
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/logout:
    post:
      tags:
      - auth-rest-controller
      summary: 'Log out '
      operationId: logOut
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/login:
    post:
      tags:
      - auth-rest-controller
      summary: Log in
      operationId: login
      parameters:
      - name: accessToken
        in: cookie
        required: false
        schema:
          type: string
      - name: refreshToken
        in: cookie
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "403":
          description: Forbidden
          content:
            application/json: {}
        "400":
          description: Bad request
          content:
            application/json: {}
        "200":
          description: User logged in successfully
          content:
            application/json: {}
        "401":
          description: Unauthorized
          content:
            application/json: {}
  /api/concerts:
    get:
      tags:
      - concert-rest-controller
      summary: Get a page of concerts
      operationId: getConcerts
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: pageSize
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 6
      - name: locations
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
          default: []
      - name: artists
        in: query
        required: false
        schema:
          type: array
          items:
            type: string
          default: []
      responses:
        "400":
          description: Invalid id supplied
        "200":
          description: Found the page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Concert'
        "404":
          description: Page not found
    post:
      tags:
      - concert-rest-controller
      summary: Create a concert
      operationId: createConcert
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Concert'
      responses:
        "201":
          description: Concert created corectly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Concert'
        "400":
          description: Concert not created
        "403":
          description: User not authorized
  /api/artists:
    get:
      tags:
      - artist-rest-controller
      summary: Get a page of artist
      operationId: getArtists
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 5
      responses:
        "200":
          description: Found the page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        "400":
          description: Invalid id supplied
        "404":
          description: Page not found
    post:
      tags:
      - artist-rest-controller
      summary: Create an artist
      operationId: createArtist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artist'
        required: true
      responses:
        "201":
          description: Artist created correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'
        "403":
          description: User not authorized
        "400":
          description: Artist not created
  /api/users/me:
    get:
      tags:
      - user-rest-controller
      summary: Gets the logged user
      operationId: me
      responses:
        "200":
          description: Found the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "401":
          description: User not authorized
  /api/tickets/{id}:
    get:
      tags:
      - ticket-rest-controller
      summary: Get a ticket by id
      operationId: getTicket
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid id supplied
        "404":
          description: Ticket not found
        "200":
          description: Found the ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Concert'
    delete:
      tags:
      - ticket-rest-controller
      summary: Delete a ticket by id
      operationId: deleteTicket
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Ticket not deleted
        "200":
          description: Found the page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Concert'
        "403":
          description: User not autorized
  /api/concerts/{id}:
    get:
      tags:
      - concert-rest-controller
      summary: Get a concert by id
      operationId: getConcert
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "400":
          description: Invalid id supplied
        "404":
          description: Concert not found
        "200":
          description: Found the page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Concert'
    delete:
      tags:
      - concert-rest-controller
      summary: Delete a concert by id
      operationId: deleteConcert
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Concert not deleted
        "200":
          description: Concert created corectly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Concert'
        "403":
          description: User not authorized
components:
  schemas:
    NewUser:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        password:
          type: string
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        encodedPassword:
          type: string
        email:
          type: string
        roles:
          type: array
          items:
            type: string
    Artist:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        uri:
          type: string
        info:
          type: string
    Concert:
      type: object
      properties:
        id:
          type: integer
          format: int64
        datetime:
          type: string
          format: date-time
        place:
          type: string
        num_tickets:
          type: integer
          format: int32
        price:
          type: number
          format: float
        info:
          type: string
        artist:
          $ref: '#/components/schemas/Artist'
        genre:
          $ref: '#/components/schemas/Genre'
    Genre:
      type: object
      properties:
        id:
          type: integer
          format: int64
        genre_type:
          type: string
    AuthResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - FAILURE
        message:
          type: string
        error:
          type: string
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    Ticket:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user:
          $ref: '#/components/schemas/User'
        concert:
          $ref: '#/components/schemas/Concert'
        num_ticket:
          type: integer
          format: int32
